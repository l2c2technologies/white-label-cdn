#!/bin/bash
# File: /opt/scripts/cdn/templates/letsencrypt-setup.sh.template (generates /usr/local/bin/cdn-setup-letsencrypt)
# Purpose: Let's Encrypt SSL certificate setup and management
#          Obtains and configures SSL certificates for CDN and Gitea domains

set -e

source /etc/cdn/config.env

GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

log() { echo -e "\${GREEN}[INFO]\${NC} \$1"; }
warn() { echo -e "\${YELLOW}[WARN]\${NC} \$1"; }
error() { echo -e "\${RED}[ERROR]\${NC} \$1"; }

echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo "  Let's Encrypt SSL Certificate Setup"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo ""

# Install certbot if not present
if ! command -v certbot &> /dev/null; then
    log "Installing certbot..."
    apt-get update
    apt-get install -y certbot python3-certbot-nginx
fi

# Function to check if certificate exists and is valid
check_cert_valid() {
    local domain=\$1
    local cert_path="/etc/letsencrypt/live/\${domain}/fullchain.pem"
    
    if [[ ! -f "\$cert_path" ]]; then
        return 1
    fi
    
    local expiry_date=\$(openssl x509 -enddate -noout -in "\$cert_path" | cut -d= -f2)
    local expiry_epoch=\$(date -d "\$expiry_date" +%s)
    local current_epoch=\$(date +%s)
    local days_until_expiry=\$(( (\$expiry_epoch - \$current_epoch) / 86400 ))
    
    if [[ \$days_until_expiry -gt 0 ]]; then
        log "Valid certificate found for \${domain} (expires in \${days_until_expiry} days)"
        return 0
    else
        warn "Certificate for \${domain} has expired"
        return 1
    fi
}

# Request certificate with certbot
request_certificate() {
    local domain=\$1
    local email_opt=\$2
    
    log "Requesting certificate for: \${domain}"
    
    if [[ -n "\$email_opt" ]]; then
        certbot --nginx -d "\${domain}" \
            --non-interactive \
            --agree-tos \
            --email "\${email_opt}" \
            --redirect \
            --hsts \
            --staple-ocsp
    else
        certbot --nginx -d "\${domain}" \
            --non-interactive \
            --agree-tos \
            --register-unsafely-without-email \
            --redirect \
            --hsts \
            --staple-ocsp
    fi
    
    if [[ \$? -eq 0 ]]; then
        log "✓ Certificate obtained for \${domain}"
        return 0
    else
        error "Failed to obtain certificate for \${domain}"
        return 1
    fi
}

# Add custom security headers after certbot
add_security_headers() {
    local domain=\$1
    local config_file=\$2
    
    log "Adding custom security headers to \${config_file}..."
    
    # Check if headers already added
    if grep -q "X-Frame-Options" "\$config_file"; then
        log "Security headers already present"
        return 0
    fi
    
    # Find the SSL server block and add headers
    sed -i '/listen 443 ssl/,/^[[:space:]]*}[[:space:]]*\$/ {
        /listen 443 ssl/ a\
\
    # Security headers\
    add_header X-Frame-Options "SAMEORIGIN" always;\
    add_header X-Content-Type-Options "nosniff" always;\
    add_header X-XSS-Protection "1; mode=block" always;
    }' "\$config_file"
    
    # For CDN, also add CORS headers
    if [[ "\$domain" == "${CDN_DOMAIN}" ]]; then
        sed -i '/X-XSS-Protection/a\
\
    # CORS headers\
    add_header Access-Control-Allow-Origin "*" always;\
    add_header Access-Control-Allow-Methods "GET, HEAD, OPTIONS" always;' "\$config_file"
    fi
    
    log "✓ Security headers added"
}

log "Checking existing certificates..."
echo ""

# Check CDN certificate
CDN_NEEDS_CERT=false
if check_cert_valid "${CDN_DOMAIN}"; then
    log "Using existing valid certificate for CDN: ${CDN_DOMAIN}"
else
    warn "Valid certificate not found for CDN: ${CDN_DOMAIN}"
    CDN_NEEDS_CERT=true
fi

echo ""

# Check Gitea certificate
GITEA_NEEDS_CERT=false
if check_cert_valid "${GITEA_DOMAIN}"; then
    log "Using existing valid certificate for Gitea: ${GITEA_DOMAIN}"
else
    warn "Valid certificate not found for Gitea: ${GITEA_DOMAIN}"
    GITEA_NEEDS_CERT=true
fi

echo ""

# Request certificates if needed
if [[ "\$CDN_NEEDS_CERT" == true ]]; then
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    log "Obtaining certificate for CDN domain..."
    echo ""
    
    if ! request_certificate "${CDN_DOMAIN}" "${LE_EMAIL}"; then
        error "Failed to obtain CDN certificate"
        echo ""
        echo "Please check:"
        echo "  • DNS is properly configured for ${CDN_DOMAIN}"
        echo "  • Domain points to this server: \$(curl -s ifconfig.me 2>/dev/null || echo 'unknown')"
        echo "  • Port 80 is accessible from the internet"
        exit 1
    fi
    
    # Add custom security headers
    add_security_headers "${CDN_DOMAIN}" "/etc/nginx/sites-available/cdn"
    echo ""
fi

if [[ "\$GITEA_NEEDS_CERT" == true ]]; then
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    log "Obtaining certificate for Gitea domain..."
    echo ""
    
    if ! request_certificate "${GITEA_DOMAIN}" "${LE_EMAIL}"; then
        error "Failed to obtain Gitea certificate"
        echo ""
        echo "Please check:"
        echo "  • DNS is properly configured for ${GITEA_DOMAIN}"
        echo "  • Domain points to this server: \$(curl -s ifconfig.me 2>/dev/null || echo 'unknown')"
        echo "  • Port 80 is accessible from the internet"
        exit 1
    fi
    
    # Add custom security headers
    add_security_headers "${GITEA_DOMAIN}" "/etc/nginx/sites-available/gitea"
    echo ""
fi

# Test nginx configuration after certbot modifications
log "Testing Nginx configuration..."
if nginx -t; then
    log "✓ Nginx configuration is valid"
    systemctl reload nginx
    log "✓ Nginx reloaded with new certificates"
else
    error "Nginx configuration test failed!"
    exit 1
fi

echo ""
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
log "Testing certificate renewal..."
echo ""

# Test renewal with dry-run for CDN
log "Running dry-run renewal test for ${CDN_DOMAIN}..."
if certbot renew --cert-name "${CDN_DOMAIN}" --dry-run --quiet; then
    log "✓ Renewal test passed for ${CDN_DOMAIN}"
else
    warn "✗ Renewal test failed for ${CDN_DOMAIN}"
    warn "Certificate renewal may not work automatically!"
    warn "Please check certbot configuration"
fi

echo ""

# Test renewal with dry-run for Gitea
log "Running dry-run renewal test for ${GITEA_DOMAIN}..."
if certbot renew --cert-name "${GITEA_DOMAIN}" --dry-run --quiet; then
    log "✓ Renewal test passed for ${GITEA_DOMAIN}"
else
    warn "✗ Renewal test failed for ${GITEA_DOMAIN}"
    warn "Certificate renewal may not work automatically!"
    warn "Please check certbot configuration"
fi

echo ""
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
log "Verifying certbot timer for automatic renewal..."
echo ""

if systemctl is-active --quiet certbot.timer; then
    log "✓ Certbot timer is active"
    log "Certificates will renew automatically"
else
    warn "Certbot timer is not active"
    log "Enabling certbot timer..."
    systemctl enable certbot.timer
    systemctl start certbot.timer
    log "✓ Certbot timer enabled"
fi

# Show timer status
echo ""
log "Next scheduled renewal check:"
systemctl list-timers certbot.timer --no-pager | grep certbot

echo ""
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
log "✓ Let's Encrypt setup completed successfully!"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo ""

# Display certificate information
echo "Certificate Information:"
echo "────────────────────────"
echo ""

if [[ -f "/etc/letsencrypt/live/${CDN_DOMAIN}/fullchain.pem" ]]; then
    echo "CDN Domain: ${CDN_DOMAIN}"
    openssl x509 -in "/etc/letsencrypt/live/${CDN_DOMAIN}/fullchain.pem" -noout -dates | sed 's/^/  /'
    echo ""
fi

if [[ -f "/etc/letsencrypt/live/${GITEA_DOMAIN}/fullchain.pem" ]]; then
    echo "Gitea Domain: ${GITEA_DOMAIN}"
    openssl x509 -in "/etc/letsencrypt/live/${GITEA_DOMAIN}/fullchain.pem" -noout -dates | sed 's/^/  /'
    echo ""
fi

echo "Features:"
echo "  ✓ Automatic renewal configured"
echo "  ✓ Renewal tested successfully"
echo "  ✓ HTTPS redirect enabled"
echo "  ✓ HSTS enabled"
echo "  ✓ OCSP stapling enabled"
echo "  ✓ Security headers added"
echo "  ✓ Certbot timer active"
echo ""

if [[ -n "${LE_EMAIL}" ]]; then
    echo "Renewal notices will be sent to: ${LE_EMAIL}"
else
    warn "No email configured - you will NOT receive renewal notices"
fi

echo ""
log "Your sites are now secured with Let's Encrypt SSL!"
